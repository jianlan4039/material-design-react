@use "sass:map";
@use "../../Elevation/internal/elevation";
@use "../../builder/background";
@use "../../Focus/internal/focus-ring";
@use "../../Ripple/internal/ripple";
@use "color";

@mixin styles($comp:"") {
  & {
    @include focus-ring.theme((
      shape: var(--md-#{$comp}-container-shape),
      shape-start-start: var(--md-#{$comp}-container-shape),
      shape-start-end: var(--md-#{$comp}-container-shape),
      shape-end-end: var(--md-#{$comp}-container-shape),
      shape-end-start: var(--md-#{$comp}-container-shape),
    ));
    @include elevation.theme((
      level: var(--md-#{$comp}-container-elevation),
      shadow-color: var(--md-#{$comp}-container-shadow-color)
    ));
    @include background.theme((
      color: var(--md-#{$comp}-container-color)
    ), $comp);
    position: relative;
    display: inline-flex;
    border-start-start-radius: var(--md-#{$comp}-container-shape-start-start);
    border-start-end-radius: var(--md-#{$comp}-container-shape-start-end);
    border-end-start-radius: var(--md-#{$comp}-container-shape-end-start);
    border-end-end-radius: var(--md-#{$comp}-container-shape-end-end);
    block-size: var(--md-#{$comp}-container-height);
    z-index: 10;

    @include color.styles((
      'focus-icon-color': var(--md-#{$comp}-focus-icon-color),
      'hover-icon-color': var(--md-#{$comp}-hover-icon-color),
      'icon-color': var(--md-#{$comp}-icon-color),
      'pressed-icon-color': var(--md-#{$comp}-pressed-icon-color),
    ), $comp);

    &.lowered {
      @include background.theme((
        color: var(--md-#{$comp}-lowered-container-color)
      ), $comp);
      @include _elevation((
        'default': var(--md-#{$comp}-lowered-container-elevation),
        'focus': var(--md-#{$comp}-lowered-focus-container-elevation),
        'hover': var(--md-#{$comp}-lowered-hover-container-elevation),
        'pressed': var(--md-#{$comp}-lowered-pressed-container-elevation),
      ));
    }

    &.nd-fab--primary {
      @include color.styles((
        'container-color': var(--md-#{$comp}-primary-container-color),
        'focus-icon-color': var(--md-#{$comp}-primary-focus-icon-color),
        'hover-icon-color': var(--md-#{$comp}-primary-hover-icon-color),
        'hover-ripple-color': var(--md-#{$comp}-primary-hover-state-layer-color),
        'icon-color': var(--md-#{$comp}-primary-icon-color),
        'pressed-icon-color': var(--md-#{$comp}-primary-pressed-icon-color),
        'pressed-ripple-color': var(--md-#{$comp}-primary-pressed-state-layer-color),
        'label-text-color': var(--md-#{$comp}-primary-label-text-color),
        'hover-label-text-color': var(--md-#{$comp}-primary-hover-label-text-color),
        'focus-label-text-color': var(--md-#{$comp}-primary-focus-label-text-color),
        'pressed-label-text-color': var(--md-#{$comp}-primary-pressed-label-text-color),
      ), $comp);
    }

    &.nd-fab--secondary {
      @include color.styles((
        'container-color': var(--md-#{$comp}-secondary-container-color),
        'focus-icon-color': var(--md-#{$comp}-secondary-focus-icon-color),
        'hover-icon-color': var(--md-#{$comp}-secondary-hover-icon-color),
        'hover-ripple-color': var(--md-#{$comp}-secondary-hover-state-layer-color),
        'icon-color': var(--md-#{$comp}-secondary-icon-color),
        'pressed-icon-color': var(--md-#{$comp}-secondary-pressed-icon-color),
        'pressed-ripple-color':var(--md-#{$comp}-secondary-pressed-state-layer-color),
        'label-text-color': var(--md-#{$comp}-secondary-label-text-color),
        'hover-label-text-color': var(--md-#{$comp}-secondary-hover-label-text-color),
        'focus-label-text-color': var(--md-#{$comp}-secondary-focus-label-text-color),
        'pressed-label-text-color': var(--md-#{$comp}-secondary-pressed-label-text-color),
      ), $comp);
    }

    &.nd-fab--tertiary {
      @include color.styles((
        'container-color': var(--md-#{$comp}-tertiary-container-color),
        'focus-icon-color': var(--md-#{$comp}-tertiary-focus-icon-color),
        'hover-icon-color': var(--md-#{$comp}-tertiary-hover-icon-color),
        'hover-ripple-color': var(--md-#{$comp}-tertiary-hover-state-layer-color),
        'icon-color': var(--md-#{$comp}-tertiary-icon-color),
        'pressed-icon-color': var(--md-#{$comp}-tertiary-pressed-icon-color),
        'pressed-ripple-color': var(--md-#{$comp}-tertiary-pressed-state-layer-color),
        'label-text-color': var(--md-#{$comp}-tertiary-label-text-color),
        'hover-label-text-color': var(--md-#{$comp}-tertiary-hover-label-text-color),
        'focus-label-text-color': var(--md-#{$comp}-tertiary-focus-label-text-color),
        'pressed-label-text-color': var(--md-#{$comp}-tertiary-pressed-label-text-color),
      ), $comp);
    }

    .nd-fab__button {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
      border: none;
      outline: none;
      background: transparent;
      block-size: 100%;
      inline-size: 100%;
      padding: 0;
      color: var(--md-#{$comp}-label-text-color);
      font-size: var(--md-#{$comp}-label-text-size);
      font-family: var(--md-#{$comp}-label-text-font), serif;
      line-height: var(--md-#{$comp}-label-text-line-height);
      font-weight: var(--md-#{$comp}-label-text-weight);
      cursor: pointer;

      .nd-fab__icon-slot,
      .nd-fab__label-slot {
        display: contents;
        color: var(--md-#{$comp}-icon-color);
      }

      .nd-fab__icon-slot,
      .nd-fab__icon-slot > * {
        font-size: var(--md-#{$comp}-icon-size);
      }
    }

    &.large {
      @include focus-ring.theme((shape: var(--md-#{$comp}-large-container-shape)));
      block-size: var(--md-#{$comp}-large-container-height);
      inline-size: var(--md-#{$comp}-large-container-width);
      border-start-start-radius: var(--md-#{$comp}-large-container-shape-start-start);
      border-start-end-radius: var(--md-#{$comp}-large-container-shape-start-end);
      border-end-start-radius: var(--md-#{$comp}-large-container-shape-end-start);
      border-end-end-radius: var(--md-#{$comp}-large-container-shape-end-end);

      .nd-fab__icon-slot, .nd-fab__icon-slot > * {
        font-size: var(--md-#{$comp}-large-icon-size);
      }
    }

    &.small {
      @include focus-ring.theme((shape: var(--md-#{$comp}-small-container-shape)));
      block-size: var(--md-#{$comp}-small-container-height);
      inline-size: var(--md-#{$comp}-small-container-width);
      border-start-start-radius: var(--md-#{$comp}-small-container-shape-start-start);
      border-start-end-radius: var(--md-#{$comp}-small-container-shape-start-end);
      border-end-start-radius: var(--md-#{$comp}-small-container-shape-end-start);
      border-end-end-radius: var(--md-#{$comp}-small-container-shape-end-end);

      .nd-fab__icon-slot, .nd-fab__icon-slot > * {
        font-size: var(--md-#{$comp}-small-icon-size);
      }
    }
  }
}

@mixin _elevation($states, $shadow-color: null) {
  @include elevation.theme((
    'level': map.get($states, 'default'),
  ));

  @if $shadow-color {
    @include elevation.theme((
      'shadow-color': $shadow-color,
    ));
  }

  &:focus {
    @include elevation.theme((
      'level': map.get($states, 'focus'),
    ));
  }

  &:hover {
    @include elevation.theme((
      'level': map.get($states, 'hover'),
    ));
  }

  &:active {
    @include elevation.theme((
      'level': map.get($states, 'pressed'),
    ));
  }
}